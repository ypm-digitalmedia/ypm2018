<?php

/**
 * @file
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\TypedData\DataDefinition;

/* BRICKS STORAGE */

/**
 * Helper function for FieldItemInterface::propertyDefinitions().
 */
function _bricks_field_properties_alter(&$properties) {
  $properties['depth'] = DataDefinition::create('integer')
    ->setLabel(t('Depth'));

  $properties['options'] = DataDefinition::create('any')
    ->setLabel(t('Options'));
}

/**
 * Helper function for FieldItemInterface::schema().
 */
function _bricks_field_schema_alter(&$schema) {
  $schema['columns']['depth'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
  );

  $schema['columns']['options'] = array(
    'type' => 'blob',
    'size' => 'normal',
    'not null' => FALSE,
    'serialize' => TRUE,
  );
}

/* BRICKS FORMATTING */

/**
 * Implements hook_theme().
 */
function bricks_theme($existing, $type, $theme, $path) {
  return [
    'eck_entity__brick' => [
      'base hook' => 'eck_entity',
    ],
  ];
}

/**
 * Implements hook_entity_view_alter().
 */
function bricks_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'layout' && !empty($build['#layout']) && !isset($build['_bricks_layout']) && \Drupal::service('module_handler')->moduleExists('layout_discovery')) {
    $layoutPluginManager = \Drupal::service('plugin.manager.core.layout');
    if (!$layoutPluginManager->getDefinition($build['#layout'], FALSE)) {
      drupal_set_message(t('Layout `%layout_id` is unknown.', ['%layout_id' => $build['#layout']]), 'warning');
      return;
    }

    // Provide any configuration to the layout plugin if necessary.
    $layoutInstance = $layoutPluginManager->createInstance($build['#layout']);
    $regionNames = $layoutInstance->getPluginDefinition()->getRegionNames();

    // Adjust the lengths:
    $count = min(count($regionNames), count($build['childs']));
    $regionNames = array_slice($regionNames, 0, $count);
    $childs = array_slice($build['childs'], 0, $count);

    // Build the content for your regions.
    $regions = array_combine($regionNames, $childs);

    // This builds the render array.
    $build['_bricks_layout'] = $layoutInstance->build($regions);
    unset($build['childs']);
  }
}

/**
 * Prepares variables for `eck-entity.html.twig`.
 */
function bricks_preprocess_eck_entity(&$variables) {
  if (!empty($variables['entity']['field_childs']) && Element::children($variables['entity']['field_childs'])) {
    $variables['entity']['childs'] = array_intersect_key($variables['entity']['field_childs'], Element::children($variables['entity']['field_childs']));
  }
}

/**
 * Prepares variables for `paragraph.html.twig`.
 */
function bricks_preprocess_paragraph(&$variables) {
  if (isset($variables['content']['childs'])) {
    $paragraph = $variables['elements']['#paragraph'];
    if ($field_name = _bricks_first_entity_reference_field_name($paragraph)) {
      $variables['content'][$field_name] = $variables['content']['childs'];
      unset($variables['content']['childs']);
    }
  }
}

/**
 * Helper function: returns a name of the first field of type entity_reference(_revisions).
 */
function _bricks_first_entity_reference_field_name($entity) {
  foreach ($entity->getFieldDefinitions() as $field_name => $field_definition) {
    if (!$field_definition->getFieldStorageDefinition()->isBaseField()
      && in_array($field_definition->getType(), ['entity_reference', 'entity_reference_revisions'])) {
      return $field_name;
    }
  }
}

/**
 * Prepares variables for `field.html.twig`.
 */
function bricks_preprocess_field(&$variables) {
  $element = $variables['element'];

  if ($element['#formatter'] == 'bricks_nested') {
    $variables['items'] = [
      [
        'content' => _bricks_nest_items($element, $variables['items']),
      ],
    ];
  }
}

/**
 * Helper function: converts element's items to a tree structure.
 */
function _bricks_nest_items($element, $items) {

  // Prepare items:
  $parents = array(-1);
  $prev_depth = 0;
  foreach ($items as $delta => $item) {
    $depth = $element['#items'][$delta]->depth;
    if ($depth > $prev_depth) {
      array_unshift($parents, $delta - 1);
    }
    elseif ($depth < $prev_depth) {
      array_splice($parents, 0, $prev_depth - $depth);
    }
    $prev_depth = $depth;

    $items[$delta] = $items[$delta]['content'];
    $items[$delta]['#label'] = $element['#items'][$delta]->entity->label();
    $items[$delta]['#delta'] = $delta;
    $items[$delta]['#parent_delta'] = $parents[0];

    $items[$delta]['childs'] = array();
    if (!empty($element['#items'][$delta]->options['view_mode'])) {
      $items[$delta]['#view_mode'] = $element['#items'][$delta]->options['view_mode'];
    }
    if (!empty($element['#items'][$delta]->options['layout'])) {
      $items[$delta]['#layout'] = $element['#items'][$delta]->options['layout'];
    }
    if (!empty($element['#items'][$delta]->options['css_class'])) {
      $items[$delta]['#attributes']['class'][] = $element['#items'][$delta]->options['css_class'];
    }

    // Disable entity render cache, rely on field cache:
    $items[$delta]['#cache'] = array('disabled' => TRUE);
  }

  // Process items in reverse order (without recursion):
  $rdeltas = array_reverse(array_keys($items));
  foreach ($rdeltas as $delta) {
    $parent_delta = $items[$delta]['#parent_delta'];
    if ($parent_delta != -1) {
      array_unshift($items[$parent_delta]['childs'], $items[$delta]);
      unset($items[$delta]);
    }
  }

  return $items;
}

/* BRICKS EDITING */

/**
 * Implements hook_field_widget_info_alter().
 */
function bricks_field_widget_info_alter(array &$info) {
  // Let Bricks to re-use ANY Entity Reference -compatible widgets:
  foreach ($info as $widget_id => &$widget_info) {
    if (in_array('entity_reference', $widget_info['field_types'])) {
      $widget_info['field_types'][] = 'bricks';
    }
    if (in_array('entity_reference_revisions', $widget_info['field_types'])) {
      $widget_info['field_types'][] = 'bricks_revisioned';
    }
  }
}

/**
 * Prepares variables for `field-multiple-value-form.html.twig`.
 */
function bricks_preprocess_field_multiple_value_form(&$variables) {
  _bricks_preprocess_tabledrag_form($variables, 'element', 'bricks_tree_autocomplete', $variables['element']['#field_name'] . '-delta-order');
}

/**
 * Helper function for hook_preprocess_field_multiple_value_form().
 */
function _bricks_preprocess_tabledrag_form(&$variables, $element_key, $widget, $order_class, $render_options = FALSE) {
  $element = $variables[$element_key];

  if (isset($element['#widget']) && $element['#widget'] == $widget) {
    // @TODO: Tmp hack for the proper indent width calculation.
    $variables['table']['#header'][0]['style'] = 'min-width: 100px';
    $variables['table']['#header'][] = ['data' => t('Depth'), 'class' => ['bricks-depth-header']];

    foreach (Element::children($element) as $row => $key) {
      if ($key !== 'add_more') {
        $depth = $element[$key]['depth']['#value'];

        $indentation = array();
        if ($depth > 0) {
          $indentation = array(
            '#theme' => 'indentation',
            '#size' => $depth,
          );
        }

        $drag_cell = &$variables['table']['#rows'][$row]['data'][0];
        $drag_cell['data'] = !empty($indentation) ? drupal_render($indentation) : '' . $drag_cell['data'];
        // @TODO
        $drag_cell['style'] = 'width: initial';

        show($element[$key]['depth']);
        $variables['table']['#rows'][$row]['data'][] = \Drupal::service('renderer')->render($element[$key]['depth']);

        // @TODO: Get rid of $render_options hack.
        if ($render_options) {
          $element[$key]['options']['#prefix'] = $variables['table']['#rows'][$row]['data'][2]['data'];
          $variables['table']['#rows'][$row]['data'][2]['data'] = \Drupal::service('renderer')->render($element[$key]['options']);
        }
      }
    }

    $tabledrag_options = &$variables['table']['#tabledrag'];
    $tabledrag_options[0]['relationship'] = 'all';
    $tabledrag_options[] = array(
      'action' => 'depth',
      'relationship' => 'group',
      'group' => 'bricks-depth',
    );
    // Fake option to enable indentation:
    $tabledrag_options[] = array(
      'action' => 'match',
      'relationship' => 'parent',
      'group' => $order_class,
    );

    $variables['table']['#attached']['library'][] = 'bricks/tabledrag.relationship-all';
  }
}

/**
 * Helper function for widget's formElement().
 */
function _bricks_form_element_alter(&$element, $item, $entity) {
  $element['depth'] = array(
  // @TODO: Other types break the correct indentations.
    '#type' => 'hidden',
    '#default_value' => !empty($item->depth) ? $item->depth : 0,
    '#weight' => 10,
    '#attributes' => array(
      'class' => array('bricks-depth'),
    ),
  );
  $element['options'] = array(
    '#type' => 'container',
    '#weight' => 100,
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
  );
  if ($entity) {
    if ($entity->bundle() == 'layout' && \Drupal::service('module_handler')->moduleExists('layout_discovery')) {
      $element['options']['layout'] = array(
        '#type' => 'select',
        '#options' => \Drupal::service('plugin.manager.core.layout')->getLayoutOptions(),
        '#default_value' => !empty($item->options['layout']) ? $item->options['layout'] : NULL,
      );
    }
    if ($entity->bundle() != 'layout') {
      $element['options']['view_mode'] = array(
        '#type' => 'select',
        '#options' => \Drupal::service('entity_display.repository')->getViewModeOptions($entity->getEntityTypeId()),
        '#default_value' => !empty($item->options['view_mode']) ? $item->options['view_mode'] : NULL,
      );
    }
  }
  $element['options']['css_class'] = array(
    '#type' => 'textfield',
    '#default_value' => !empty($item->options['css_class']) ? $item->options['css_class'] : '',
    '#size' => 10,
    '#attributes' => array(
      'placeholder' => t('CSS class(-es)'),
    ),
  );
}

/* MISC */

/**
 * Prepares variables for `block.html.twig` for `system_powered_by_block`.
 */
function bricks_preprocess_block__system_powered_by_block(&$variables) {
  $bricks_link = '<a href="https://uibricks.com">Bricks</a>';
  $variables['content']['#markup'] = str_replace('>Drupal</a>', '>Drupal</a> & ' . $bricks_link, $variables['content']['#markup']);
}
